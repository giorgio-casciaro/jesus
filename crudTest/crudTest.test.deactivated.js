'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (!global._babelPolyfill) {
  require('babel-polyfill');
}
var t = require('tap');
var R = require('ramda');
var path = require('path');
var PACKAGE = 'jesus.test';
process.on('unhandledRejection', function (reason, promise) {
  console.log('unhandledRejection Reason: ', promise, reason);
  console.trace(promise);
});

var SERVICE = {
  name: 'testService',
  routes: {},
  config: {
    mainStorage: {
      type: 'inmemory',
      config: {
        path: path.join(__dirname, 'fileDb')
      }
    }
  },
  events: {}
};
var DI = require('./DI.default');
DI = R.merge(DI, require('./DI')(SERVICE, PACKAGE));

t.test('*** JESUS SERVICE CRUD ***', {
  autoend: true
}, function mainTest(t) {
  var entityTestConfig, entityTestDI;
  return regeneratorRuntime.async(function mainTest$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          _context10.next = 2;
          return regeneratorRuntime.awrap(require('./entityTestConfig')(SERVICE, DI));

        case 2:
          entityTestConfig = _context10.sent;
          _context10.next = 5;
          return regeneratorRuntime.awrap(require('./entityTestDI')(DI, entityTestConfig));

        case 5:
          entityTestDI = _context10.sent;

          global.serviceResponse = {};
          t.plan(4);
          _context10.next = 10;
          return regeneratorRuntime.awrap(t.test('-> CRUD CREATE', function _callee3(t) {
            var createEntityTest, createEntityTestRequest;
            return regeneratorRuntime.async(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.prev = 0;

                    createEntityTest = function _callee2(request) {
                      var _this = this;

                      var items, authorizationsData, itemsIds, itemsMutations, _ret;

                      return regeneratorRuntime.async(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.prev = 0;
                              _context2.next = 3;
                              return regeneratorRuntime.awrap(function _callee() {
                                var uuidV4;
                                return regeneratorRuntime.async(function _callee$(_context) {
                                  while (1) {
                                    switch (_context.prev = _context.next) {
                                      case 0:
                                        uuidV4 = require('uuid/v4');
                                        items = request.items;

                                        if (!(!items || !items.length)) {
                                          _context.next = 4;
                                          break;
                                        }

                                        throw new Error('createEntityTest require items');

                                      case 4:
                                        items.forEach(function (item) {
                                          if (!item._id) item._id = uuidV4();
                                        }); // ID AUTOGENERATED IF NOT INCLUDED
                                        _context.next = 7;
                                        return regeneratorRuntime.awrap(entityTestDI.validate({ items: items }));

                                      case 7:
                                        _context.next = 9;
                                        return regeneratorRuntime.awrap(DI.authenticate({ request: request }));

                                      case 9:
                                        authorizationsData = _context.sent;
                                        _context.next = 12;
                                        return regeneratorRuntime.awrap(DI.authorize({ context: authorizationsData, action: 'write', entity: 'entityTest', items: items }));

                                      case 12:
                                        itemsIds = R.map(R.prop('_id'), items);
                                        _context.next = 15;
                                        return regeneratorRuntime.awrap(entityTestDI.mutationsPackage.mutate({ mutation: 'create', itemsIds: itemsIds, items: items }));

                                      case 15:
                                        itemsMutations = _context.sent;

                                        DI.debug({ msg: 'createEntityTest', context: PACKAGE, debug: { itemsMutations: itemsMutations } });
                                        _context.next = 19;
                                        return regeneratorRuntime.awrap(entityTestDI.viewsPackage.refreshItemsViews({ itemsIds: itemsIds, loadSnapshot: false, loadMutations: false, addMutations: itemsMutations }));

                                      case 19:
                                        return _context.abrupt('return', {
                                          v: { itemsIds: itemsIds }
                                        });

                                      case 20:
                                      case 'end':
                                        return _context.stop();
                                    }
                                  }
                                }, null, _this);
                              }());

                            case 3:
                              _ret = _context2.sent;

                              if (!((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object")) {
                                _context2.next = 6;
                                break;
                              }

                              return _context2.abrupt('return', _ret.v);

                            case 6:
                              _context2.next = 11;
                              break;

                            case 8:
                              _context2.prev = 8;
                              _context2.t0 = _context2['catch'](0);

                              DI.throwError('createEntityTest', _context2.t0, request);

                            case 11:
                            case 'end':
                              return _context2.stop();
                          }
                        }
                      }, null, this, [[0, 8]]);
                    };

                    DI.registerRoute({ route: 'createEntityTest', routeFunction: createEntityTest });
                    DI.registerEvent({ event: 'createEntityTest', route: 'createEntityTest' });
                    createEntityTestRequest = {
                      items: [{ name: 'test' }, { name: 'test2' }]
                    };
                    _context3.prev = 5;
                    _context3.next = 8;
                    return regeneratorRuntime.awrap(DI.callRoute({ route: 'createEntityTest', request: createEntityTestRequest }));

                  case 8:
                    global.serviceResponse = _context3.sent;

                    t.type(global.serviceResponse, 'object', 'Response is object');
                    t.type(global.serviceResponse.itemsIds, 'Array', 'itemsIds is array');
                    t.type(global.serviceResponse.itemsIds.length, 2, 'itemsIds length is 2');
                    _context3.next = 17;
                    break;

                  case 14:
                    _context3.prev = 14;
                    _context3.t0 = _context3['catch'](5);

                    DI.throwError('DI.callRoute createEntityTest', _context3.t0, { route: 'createEntityTest', request: createEntityTestRequest });

                  case 17:

                    t.end();
                    _context3.next = 25;
                    break;

                  case 20:
                    _context3.prev = 20;
                    _context3.t1 = _context3['catch'](0);

                    DI.error({ error: _context3.t1 });
                    t.fail('FAIL createEntityTest');
                    t.end('FAIL createEntityTest');

                  case 25:
                  case 'end':
                    return _context3.stop();
                }
              }
            }, null, this, [[0, 20], [5, 14]]);
          }));

        case 10:
          _context10.next = 12;
          return regeneratorRuntime.awrap(t.test('-> CRUD UPDATE', function _callee5(t) {
            var updateEntityTest, updateEntityTestRequest;
            return regeneratorRuntime.async(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.prev = 0;

                    updateEntityTest = function _callee4(request) {
                      var items, authorizationsData, itemsIds, itemsMutations;
                      return regeneratorRuntime.async(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              _context4.prev = 0;
                              items = request.items;

                              if (!(!items || !items.length)) {
                                _context4.next = 4;
                                break;
                              }

                              throw new Error('updateEntityTest require items');

                            case 4:
                              items.forEach(function (item) {
                                if (!item._id) throw new Error('updateEntityTest items _id field is required');
                              }); // ID NEEDED
                              _context4.next = 7;
                              return regeneratorRuntime.awrap(entityTestDI.validate({ items: items }));

                            case 7:
                              _context4.next = 9;
                              return regeneratorRuntime.awrap(DI.authenticate({ request: request }));

                            case 9:
                              authorizationsData = _context4.sent;
                              _context4.next = 12;
                              return regeneratorRuntime.awrap(DI.authorize({ context: authorizationsData, action: 'write', entity: 'entityTest', items: items }));

                            case 12:
                              itemsIds = R.map(R.prop('_id'), items);
                              _context4.next = 15;
                              return regeneratorRuntime.awrap(entityTestDI.mutationsPackage.mutate({ mutation: 'update', itemsIds: itemsIds, items: items }));

                            case 15:
                              itemsMutations = _context4.sent;

                              DI.debug({ msg: 'updateEntityTest', context: PACKAGE, debug: { itemsMutations: itemsMutations } });
                              _context4.next = 19;
                              return regeneratorRuntime.awrap(entityTestDI.viewsPackage.refreshItemsViews({ itemsIds: itemsIds, loadSnapshot: true, loadMutations: true, addMutations: itemsMutations }));

                            case 19:
                              return _context4.abrupt('return', { itemsIds: itemsIds });

                            case 22:
                              _context4.prev = 22;
                              _context4.t0 = _context4['catch'](0);

                              DI.throwError('updateEntityTest', _context4.t0, request);

                            case 25:
                            case 'end':
                              return _context4.stop();
                          }
                        }
                      }, null, this, [[0, 22]]);
                    };

                    DI.registerRoute({ route: 'updateEntityTest', routeFunction: updateEntityTest });
                    DI.registerEvent({ event: 'updateEntityTest', route: 'updateEntityTest' });
                    updateEntityTestRequest = {
                      items: [{ name: 'testupdate', _id: global.serviceResponse.itemsIds[0] }, { name: 'testupdate2', _id: global.serviceResponse.itemsIds[1] }]
                    };
                    _context5.prev = 5;
                    _context5.next = 8;
                    return regeneratorRuntime.awrap(DI.callRoute({ route: 'updateEntityTest', request: updateEntityTestRequest }));

                  case 8:
                    global.serviceResponse = _context5.sent;

                    t.type(global.serviceResponse, 'object', 'Response is object');
                    t.type(global.serviceResponse.itemsIds, 'Array', 'itemsIds is array');
                    t.type(global.serviceResponse.itemsIds.length, 2, 'itemsIds length is 2');
                    _context5.next = 17;
                    break;

                  case 14:
                    _context5.prev = 14;
                    _context5.t0 = _context5['catch'](5);

                    DI.throwError('DI.callRoute updateEntityTest', _context5.t0, { route: 'updateEntityTest', request: updateEntityTestRequest });

                  case 17:

                    t.end();
                    _context5.next = 25;
                    break;

                  case 20:
                    _context5.prev = 20;
                    _context5.t1 = _context5['catch'](0);

                    DI.error({ error: _context5.t1 });
                    t.fail('FAIL updateEntityTest');
                    t.end('FAIL updateEntityTest');

                  case 25:
                  case 'end':
                    return _context5.stop();
                }
              }
            }, null, this, [[0, 20], [5, 14]]);
          }));

        case 12:
          _context10.next = 14;
          return regeneratorRuntime.awrap(t.test('-> CRUD READ', function _callee7(t) {
            var readEntityTest, readEntityTestRequest;
            return regeneratorRuntime.async(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _context7.prev = 0;

                    readEntityTest = function _callee6(request) {
                      var itemsIds, authorizationsData, items;
                      return regeneratorRuntime.async(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              _context6.prev = 0;
                              itemsIds = request.ids;

                              if (!(!itemsIds || !itemsIds.length)) {
                                _context6.next = 4;
                                break;
                              }

                              throw new Error('readEntityTest require items ids');

                            case 4:
                              _context6.next = 6;
                              return regeneratorRuntime.awrap(DI.authenticate({ request: request }));

                            case 6:
                              authorizationsData = _context6.sent;
                              _context6.next = 9;
                              return regeneratorRuntime.awrap(DI.authorize({ context: authorizationsData, action: 'read', entity: 'entityTest', itemsIds: itemsIds }));

                            case 9:
                              _context6.next = 11;
                              return regeneratorRuntime.awrap(entityTestDI.viewsPackage.get({ ids: itemsIds }));

                            case 11:
                              items = _context6.sent;

                              DI.debug({ msg: 'readEntityTest', context: PACKAGE, debug: { itemsIds: itemsIds, authorizationsData: authorizationsData, items: items } });
                              return _context6.abrupt('return', { items: items });

                            case 16:
                              _context6.prev = 16;
                              _context6.t0 = _context6['catch'](0);

                              DI.throwError('readEntityTest', _context6.t0, request);

                            case 19:
                            case 'end':
                              return _context6.stop();
                          }
                        }
                      }, null, this, [[0, 16]]);
                    };

                    DI.registerRoute({ route: 'readEntityTest', routeFunction: readEntityTest });
                    DI.registerEvent({ event: 'readEntityTest', route: 'readEntityTest' });
                    readEntityTestRequest = {
                      ids: global.serviceResponse.itemsIds
                    };
                    _context7.prev = 5;
                    _context7.next = 8;
                    return regeneratorRuntime.awrap(DI.callRoute({ route: 'readEntityTest', request: readEntityTestRequest }));

                  case 8:
                    global.serviceResponse = _context7.sent;

                    t.type(global.serviceResponse, 'object', 'Response is object');
                    t.type(global.serviceResponse.items, 'Array', 'items is array');
                    t.type(global.serviceResponse.items.length, 2, 'items length is 2');
                    t.equal(global.serviceResponse.items[0].name, 'testupdate', 'item 1 : sended name = readed name');
                    t.equal(global.serviceResponse.items[1].name, 'testupdate2', 'item 2 : sended name = readed name');
                    _context7.next = 19;
                    break;

                  case 16:
                    _context7.prev = 16;
                    _context7.t0 = _context7['catch'](5);

                    DI.throwError('DI.callRoute readEntityTest', _context7.t0, { route: 'readEntityTest', request: readEntityTestRequest });

                  case 19:

                    t.end();
                    _context7.next = 27;
                    break;

                  case 22:
                    _context7.prev = 22;
                    _context7.t1 = _context7['catch'](0);

                    DI.error({ error: _context7.t1 });
                    t.fail('FAIL readEntityTest');
                    t.end('FAIL readEntityTest');

                  case 27:
                  case 'end':
                    return _context7.stop();
                }
              }
            }, null, this, [[0, 22], [5, 16]]);
          }));

        case 14:
          _context10.next = 16;
          return regeneratorRuntime.awrap(t.test('-> CRUD DELETE', function _callee9(t) {
            var deleteEntityTest, deleteEntityTestRequest;
            return regeneratorRuntime.async(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    _context9.prev = 0;

                    deleteEntityTest = function _callee8(request) {
                      var itemsIds, authorizationsData, itemsMutations;
                      return regeneratorRuntime.async(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              _context8.prev = 0;
                              itemsIds = request.ids;

                              if (!(!itemsIds || !itemsIds.length)) {
                                _context8.next = 4;
                                break;
                              }

                              throw new Error('deleteEntityTest require items ids');

                            case 4:
                              _context8.next = 6;
                              return regeneratorRuntime.awrap(DI.authenticate({ request: request }));

                            case 6:
                              authorizationsData = _context8.sent;
                              _context8.next = 9;
                              return regeneratorRuntime.awrap(DI.authorize({ context: authorizationsData, action: 'write', entity: 'entityTest', itemsIds: itemsIds }));

                            case 9:
                              _context8.next = 11;
                              return regeneratorRuntime.awrap(entityTestDI.mutationsPackage.mutate({ mutation: 'delete', itemsIds: itemsIds }));

                            case 11:
                              itemsMutations = _context8.sent;
                              _context8.next = 14;
                              return regeneratorRuntime.awrap(entityTestDI.viewsPackage.refreshItemsViews({ itemsIds: itemsIds, loadSnapshot: true, loadMutations: true, addMutations: itemsMutations }));

                            case 14:
                              DI.debug({ msg: 'deleteEntityTest', context: PACKAGE, debug: { itemsIds: itemsIds, itemsMutations: itemsMutations } });
                              return _context8.abrupt('return', { itemsIds: itemsIds });

                            case 18:
                              _context8.prev = 18;
                              _context8.t0 = _context8['catch'](0);

                              DI.throwError('deleteEntityTest', _context8.t0, request);

                            case 21:
                            case 'end':
                              return _context8.stop();
                          }
                        }
                      }, null, this, [[0, 18]]);
                    };

                    DI.registerRoute({ route: 'deleteEntityTest', routeFunction: deleteEntityTest });
                    DI.registerEvent({ event: 'deleteEntityTest', route: 'deleteEntityTest' });
                    deleteEntityTestRequest = {
                      ids: [global.serviceResponse.items[0]._id]
                    };
                    _context9.prev = 5;
                    _context9.next = 8;
                    return regeneratorRuntime.awrap(DI.callRoute({ route: 'deleteEntityTest', request: deleteEntityTestRequest }));

                  case 8:
                    global.serviceResponse = _context9.sent;

                    t.type(global.serviceResponse, 'object', 'Response is object');
                    t.type(global.serviceResponse.itemsIds, 'Array', 'items is array');
                    t.type(global.serviceResponse.itemsIds.length, 1, 'items length is 1');
                    _context9.next = 17;
                    break;

                  case 14:
                    _context9.prev = 14;
                    _context9.t0 = _context9['catch'](5);

                    DI.throwError('DI.callRoute deleteEntityTest', _context9.t0, { route: 'deleteEntityTest', request: deleteEntityTestRequest });

                  case 17:

                    t.end();
                    _context9.next = 25;
                    break;

                  case 20:
                    _context9.prev = 20;
                    _context9.t1 = _context9['catch'](0);

                    DI.error({ error: _context9.t1 });
                    t.fail('FAIL deleteEntityTest');
                    t.end('FAIL deleteEntityTest');

                  case 25:
                  case 'end':
                    return _context9.stop();
                }
              }
            }, null, this, [[0, 20], [5, 14]]);
          }));

        case 16:
        case 'end':
          return _context10.stop();
      }
    }
  }, null, this);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNydWRUZXN0LnRlc3QuZXM2Il0sIm5hbWVzIjpbImdsb2JhbCIsIl9iYWJlbFBvbHlmaWxsIiwicmVxdWlyZSIsInQiLCJSIiwicGF0aCIsIlBBQ0tBR0UiLCJwcm9jZXNzIiwib24iLCJyZWFzb24iLCJwcm9taXNlIiwiY29uc29sZSIsImxvZyIsInRyYWNlIiwiU0VSVklDRSIsIm5hbWUiLCJyb3V0ZXMiLCJjb25maWciLCJtYWluU3RvcmFnZSIsInR5cGUiLCJqb2luIiwiX19kaXJuYW1lIiwiZXZlbnRzIiwiREkiLCJtZXJnZSIsInRlc3QiLCJhdXRvZW5kIiwibWFpblRlc3QiLCJlbnRpdHlUZXN0Q29uZmlnIiwiZW50aXR5VGVzdERJIiwic2VydmljZVJlc3BvbnNlIiwicGxhbiIsImNyZWF0ZUVudGl0eVRlc3QiLCJyZXF1ZXN0IiwidXVpZFY0IiwiaXRlbXMiLCJsZW5ndGgiLCJFcnJvciIsImZvckVhY2giLCJpdGVtIiwiX2lkIiwidmFsaWRhdGUiLCJhdXRoZW50aWNhdGUiLCJhdXRob3JpemF0aW9uc0RhdGEiLCJhdXRob3JpemUiLCJjb250ZXh0IiwiYWN0aW9uIiwiZW50aXR5IiwiaXRlbXNJZHMiLCJtYXAiLCJwcm9wIiwibXV0YXRpb25zUGFja2FnZSIsIm11dGF0ZSIsIm11dGF0aW9uIiwiaXRlbXNNdXRhdGlvbnMiLCJkZWJ1ZyIsIm1zZyIsInZpZXdzUGFja2FnZSIsInJlZnJlc2hJdGVtc1ZpZXdzIiwibG9hZFNuYXBzaG90IiwibG9hZE11dGF0aW9ucyIsImFkZE11dGF0aW9ucyIsInRocm93RXJyb3IiLCJyZWdpc3RlclJvdXRlIiwicm91dGUiLCJyb3V0ZUZ1bmN0aW9uIiwicmVnaXN0ZXJFdmVudCIsImV2ZW50IiwiY3JlYXRlRW50aXR5VGVzdFJlcXVlc3QiLCJjYWxsUm91dGUiLCJlbmQiLCJlcnJvciIsImZhaWwiLCJ1cGRhdGVFbnRpdHlUZXN0IiwidXBkYXRlRW50aXR5VGVzdFJlcXVlc3QiLCJyZWFkRW50aXR5VGVzdCIsImlkcyIsImdldCIsInJlYWRFbnRpdHlUZXN0UmVxdWVzdCIsImVxdWFsIiwiZGVsZXRlRW50aXR5VGVzdCIsImRlbGV0ZUVudGl0eVRlc3RSZXF1ZXN0Il0sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsSUFBSSxDQUFDQSxPQUFPQyxjQUFaLEVBQTRCO0FBQzFCQyxVQUFRLGdCQUFSO0FBQ0Q7QUFDRCxJQUFJQyxJQUFJRCxRQUFRLEtBQVIsQ0FBUjtBQUNBLElBQUlFLElBQUlGLFFBQVEsT0FBUixDQUFSO0FBQ0EsSUFBSUcsT0FBT0gsUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFNSSxVQUFVLFlBQWhCO0FBQ0FDLFFBQVFDLEVBQVIsQ0FBVyxvQkFBWCxFQUFpQyxVQUFDQyxNQUFELEVBQVNDLE9BQVQsRUFBcUI7QUFDcERDLFVBQVFDLEdBQVIsQ0FBWSw2QkFBWixFQUEyQ0YsT0FBM0MsRUFBb0RELE1BQXBEO0FBQ0FFLFVBQVFFLEtBQVIsQ0FBY0gsT0FBZDtBQUNELENBSEQ7O0FBS0EsSUFBSUksVUFBVTtBQUNaQyxRQUFNLGFBRE07QUFFWkMsVUFBUSxFQUZJO0FBR1pDLFVBQVE7QUFDTkMsaUJBQWE7QUFDWEMsWUFBTSxVQURLO0FBRVhGLGNBQVE7QUFDTlosY0FBTUEsS0FBS2UsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFFBQXJCO0FBREE7QUFGRztBQURQLEdBSEk7QUFXWkMsVUFBUTtBQVhJLENBQWQ7QUFhQSxJQUFJQyxLQUFLckIsUUFBUSxjQUFSLENBQVQ7QUFDQXFCLEtBQUtuQixFQUFFb0IsS0FBRixDQUFRRCxFQUFSLEVBQVlyQixRQUFRLE1BQVIsRUFBZ0JZLE9BQWhCLEVBQXlCUixPQUF6QixDQUFaLENBQUw7O0FBRUFILEVBQUVzQixJQUFGLENBQU8sNEJBQVAsRUFBcUM7QUFDbkNDLFdBQVM7QUFEMEIsQ0FBckMsRUFFRyxTQUFlQyxRQUFmLENBQXlCeEIsQ0FBekI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSwwQ0FDNEJELFFBQVEsb0JBQVIsRUFBOEJZLE9B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QUF1QnpCakYsMkJBQU84QixlQXZCa0I7O0FBd0J6QjNCLHNCQUFFZ0IsSUFBRixDQUFPbkIsT0FBTzhCLGVBQWQsRUFBK0IsUUFBL0IsRUFBeUMsb0JBQXpDO0FBQ0EzQixzQkFBRWdCLElBQUYsQ0FBT25CLE9BQU84QixlQUFQLENBQXVCa0IsUUFBOUIsRUFBd0MsT0FBeEMsRUFBaUQsZ0JBQWpEO0FBQ0E3QyxzQkFBRWdCLElBQUYsQ0FBT25CLE9BQU84QixlQUFQLENBQXVCa0IsUUFBdkIsQ0FBZ0NaLE1BQXZDLEVBQStDLENBQS9DLEVBQWtELG1CQUFsRDtBQTFCeUI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBNEJ6QmIsdUJBQUd1QyxVQUFILENBQWMsK0JBQWQsZ0JBQXNELEVBQUNFLE9BQU8sa0JBQVIsRUFBNEIvQixTQUFTZ0QsdUJBQXJDLEVBQXREOztBQTVCeUI7O0FBK0IzQjlFLHNCQUFFbUUsR0FBRjtBQS9CMkI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBaUMzQi9DLHVCQUFHZ0QsS0FBSCxDQUFTLEVBQUNBLG1CQUFELEVBQVQ7QUFDQXBFLHNCQUFFcUUsSUFBRixDQUFPLHVCQUFQO0FBQ0FyRSxzQkFBRW1FLEdBQUYsQ0FBTSx1QkFBTjs7QUFuQzJCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBQXpCLENBL0hMOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBRkgiLCJmaWxlIjoiY3J1ZFRlc3QudGVzdC5lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcbmlmICghZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHJlcXVpcmUoJ2JhYmVsLXBvbHlmaWxsJylcbn1cbnZhciB0ID0gcmVxdWlyZSgndGFwJylcbnZhciBSID0gcmVxdWlyZSgncmFtZGEnKVxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IFBBQ0tBR0UgPSAnamVzdXMudGVzdCdcbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChyZWFzb24sIHByb21pc2UpID0+IHtcbiAgY29uc29sZS5sb2coJ3VuaGFuZGxlZFJlamVjdGlvbiBSZWFzb246ICcsIHByb21pc2UsIHJlYXNvbilcbiAgY29uc29sZS50cmFjZShwcm9taXNlKVxufSlcblxudmFyIFNFUlZJQ0UgPSB7XG4gIG5hbWU6ICd0ZXN0U2VydmljZScsXG4gIHJvdXRlczoge30sXG4gIGNvbmZpZzoge1xuICAgIG1haW5TdG9yYWdlOiB7XG4gICAgICB0eXBlOiAnaW5tZW1vcnknLFxuICAgICAgY29uZmlnOiB7XG4gICAgICAgIHBhdGg6IHBhdGguam9pbihfX2Rpcm5hbWUsICdmaWxlRGInKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXZlbnRzOiB7fVxufVxudmFyIERJID0gcmVxdWlyZSgnLi9ESS5kZWZhdWx0JylcbkRJID0gUi5tZXJnZShESSwgcmVxdWlyZSgnLi9ESScpKFNFUlZJQ0UsIFBBQ0tBR0UpKVxuXG50LnRlc3QoJyoqKiBKRVNVUyBTRVJWSUNFIENSVUQgKioqJywge1xuICBhdXRvZW5kOiB0cnVlXG59LCBhc3luYyBmdW5jdGlvbiBtYWluVGVzdCAodCkge1xuICB2YXIgZW50aXR5VGVzdENvbmZpZyA9IGF3YWl0IHJlcXVpcmUoJy4vZW50aXR5VGVzdENvbmZpZycpKFNFUlZJQ0UsIERJKVxuICB2YXIgZW50aXR5VGVzdERJID0gYXdhaXQgcmVxdWlyZSgnLi9lbnRpdHlUZXN0REknKShESSwgZW50aXR5VGVzdENvbmZpZylcbiAgZ2xvYmFsLnNlcnZpY2VSZXNwb25zZSA9IHt9XG4gIHQucGxhbig0KVxuICBhd2FpdCB0LnRlc3QoJy0+IENSVUQgQ1JFQVRFJywgYXN5bmMgZnVuY3Rpb24gKHQpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGNyZWF0ZUVudGl0eVRlc3QgPSBhc3luYyBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHV1aWRWNCA9IHJlcXVpcmUoJ3V1aWQvdjQnKVxuICAgICAgICAgIHZhciBpdGVtcyA9IHJlcXVlc3QuaXRlbXNcbiAgICAgICAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignY3JlYXRlRW50aXR5VGVzdCByZXF1aXJlIGl0ZW1zJylcbiAgICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7IGlmICghaXRlbS5faWQpaXRlbS5faWQgPSB1dWlkVjQoKSB9KSAvLyBJRCBBVVRPR0VORVJBVEVEIElGIE5PVCBJTkNMVURFRFxuICAgICAgICAgIGF3YWl0IGVudGl0eVRlc3RESS52YWxpZGF0ZSh7aXRlbXN9KVxuICAgICAgICAgIHZhciBhdXRob3JpemF0aW9uc0RhdGEgPSBhd2FpdCBESS5hdXRoZW50aWNhdGUoe3JlcXVlc3R9KVxuICAgICAgICAgIGF3YWl0IERJLmF1dGhvcml6ZSh7Y29udGV4dDogYXV0aG9yaXphdGlvbnNEYXRhLCBhY3Rpb246ICd3cml0ZScsIGVudGl0eTogJ2VudGl0eVRlc3QnLCBpdGVtc30pXG4gICAgICAgICAgdmFyIGl0ZW1zSWRzID0gUi5tYXAoUi5wcm9wKCdfaWQnKSwgaXRlbXMpXG4gICAgICAgICAgdmFyIGl0ZW1zTXV0YXRpb25zID0gYXdhaXQgZW50aXR5VGVzdERJLm11dGF0aW9uc1BhY2thZ2UubXV0YXRlKHttdXRhdGlvbjogJ2NyZWF0ZScsIGl0ZW1zSWRzLCBpdGVtc30pXG4gICAgICAgICAgREkuZGVidWcoe21zZzogJ2NyZWF0ZUVudGl0eVRlc3QnLCBjb250ZXh0OiBQQUNLQUdFLCBkZWJ1Zzoge2l0ZW1zTXV0YXRpb25zfX0pXG4gICAgICAgICAgYXdhaXQgZW50aXR5VGVzdERJLnZpZXdzUGFja2FnZS5yZWZyZXNoSXRlbXNWaWV3cyh7aXRlbXNJZHMsIGxvYWRTbmFwc2hvdDogZmFsc2UsIGxvYWRNdXRhdGlvbnM6IGZhbHNlLCBhZGRNdXRhdGlvbnM6IGl0ZW1zTXV0YXRpb25zfSlcbiAgICAgICAgICByZXR1cm4ge2l0ZW1zSWRzfVxuICAgICAgICAgICAgLy8gREkubG9nKHtjb250ZXh0OiAncGFja2FnZU5hbWUnLCBuYW1lOiAnY3JlYXRlRW50aXR5VGVzdCcsIGxvZzoge2lkc319KVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIERJLnRocm93RXJyb3IoJ2NyZWF0ZUVudGl0eVRlc3QnLCBlcnJvciwgcmVxdWVzdClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgREkucmVnaXN0ZXJSb3V0ZSh7cm91dGU6ICdjcmVhdGVFbnRpdHlUZXN0Jywgcm91dGVGdW5jdGlvbjogY3JlYXRlRW50aXR5VGVzdH0pXG4gICAgICBESS5yZWdpc3RlckV2ZW50KHtldmVudDogJ2NyZWF0ZUVudGl0eVRlc3QnLCByb3V0ZTogJ2NyZWF0ZUVudGl0eVRlc3QnfSlcbiAgICAgIHZhciBjcmVhdGVFbnRpdHlUZXN0UmVxdWVzdCA9IHtcbiAgICAgICAgaXRlbXM6IFt7bmFtZTogJ3Rlc3QnfSwge25hbWU6ICd0ZXN0Mid9XVxuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgZ2xvYmFsLnNlcnZpY2VSZXNwb25zZSA9IGF3YWl0IERJLmNhbGxSb3V0ZSh7cm91dGU6ICdjcmVhdGVFbnRpdHlUZXN0JywgcmVxdWVzdDogY3JlYXRlRW50aXR5VGVzdFJlcXVlc3R9KVxuICAgICAgICB0LnR5cGUoZ2xvYmFsLnNlcnZpY2VSZXNwb25zZSwgJ29iamVjdCcsICdSZXNwb25zZSBpcyBvYmplY3QnKVxuICAgICAgICB0LnR5cGUoZ2xvYmFsLnNlcnZpY2VSZXNwb25zZS5pdGVtc0lkcywgJ0FycmF5JywgJ2l0ZW1zSWRzIGlzIGFycmF5JylcbiAgICAgICAgdC50eXBlKGdsb2JhbC5zZXJ2aWNlUmVzcG9uc2UuaXRlbXNJZHMubGVuZ3RoLCAyLCAnaXRlbXNJZHMgbGVuZ3RoIGlzIDInKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgREkudGhyb3dFcnJvcignREkuY2FsbFJvdXRlIGNyZWF0ZUVudGl0eVRlc3QnLCBlcnJvciwge3JvdXRlOiAnY3JlYXRlRW50aXR5VGVzdCcsIHJlcXVlc3Q6IGNyZWF0ZUVudGl0eVRlc3RSZXF1ZXN0fSlcbiAgICAgIH1cblxuICAgICAgdC5lbmQoKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBESS5lcnJvcih7ZXJyb3J9KVxuICAgICAgdC5mYWlsKCdGQUlMIGNyZWF0ZUVudGl0eVRlc3QnKVxuICAgICAgdC5lbmQoJ0ZBSUwgY3JlYXRlRW50aXR5VGVzdCcpXG4gICAgfVxuICB9KVxuICBhd2FpdCB0LnRlc3QoJy0+IENSVUQgVVBEQVRFJywgYXN5bmMgZnVuY3Rpb24gKHQpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHVwZGF0ZUVudGl0eVRlc3QgPSBhc3luYyBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBpdGVtcyA9IHJlcXVlc3QuaXRlbXNcbiAgICAgICAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcigndXBkYXRlRW50aXR5VGVzdCByZXF1aXJlIGl0ZW1zJylcbiAgICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7IGlmICghaXRlbS5faWQpIHRocm93IG5ldyBFcnJvcigndXBkYXRlRW50aXR5VGVzdCBpdGVtcyBfaWQgZmllbGQgaXMgcmVxdWlyZWQnKSB9KSAvLyBJRCBORUVERURcbiAgICAgICAgICBhd2FpdCBlbnRpdHlUZXN0REkudmFsaWRhdGUoe2l0ZW1zfSlcbiAgICAgICAgICB2YXIgYXV0aG9yaXphdGlvbnNEYXRhID0gYXdhaXQgREkuYXV0aGVudGljYXRlKHtyZXF1ZXN0fSlcbiAgICAgICAgICBhd2FpdCBESS5hdXRob3JpemUoe2NvbnRleHQ6IGF1dGhvcml6YXRpb25zRGF0YSwgYWN0aW9uOiAnd3JpdGUnLCBlbnRpdHk6ICdlbnRpdHlUZXN0JywgaXRlbXN9KVxuICAgICAgICAgIHZhciBpdGVtc0lkcyA9IFIubWFwKFIucHJvcCgnX2lkJyksIGl0ZW1zKVxuICAgICAgICAgIHZhciBpdGVtc011dGF0aW9ucyA9IGF3YWl0IGVudGl0eVRlc3RESS5tdXRhdGlvbnNQYWNrYWdlLm11dGF0ZSh7bXV0YXRpb246ICd1cGRhdGUnLCBpdGVtc0lkcywgaXRlbXN9KVxuICAgICAgICAgIERJLmRlYnVnKHttc2c6ICd1cGRhdGVFbnRpdHlUZXN0JywgY29udGV4dDogUEFDS0FHRSwgZGVidWc6IHtpdGVtc011dGF0aW9uc319KVxuICAgICAgICAgIGF3YWl0IGVudGl0eVRlc3RESS52aWV3c1BhY2thZ2UucmVmcmVzaEl0ZW1zVmlld3Moe2l0ZW1zSWRzLCBsb2FkU25hcHNob3Q6IHRydWUsIGxvYWRNdXRhdGlvbnM6IHRydWUsIGFkZE11dGF0aW9uczogaXRlbXNNdXRhdGlvbnN9KVxuICAgICAgICAgIHJldHVybiB7aXRlbXNJZHN9XG4gICAgICAgICAgICAvLyBESS5sb2coe2NvbnRleHQ6ICdwYWNrYWdlTmFtZScsIG5hbWU6ICd1cGRhdGVFbnRpdHlUZXN0JywgbG9nOiB7aWRzfX0pXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgREkudGhyb3dFcnJvcigndXBkYXRlRW50aXR5VGVzdCcsIGVycm9yLCByZXF1ZXN0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBESS5yZWdpc3RlclJvdXRlKHtyb3V0ZTogJ3VwZGF0ZUVudGl0eVRlc3QnLCByb3V0ZUZ1bmN0aW9uOiB1cGRhdGVFbnRpdHlUZXN0fSlcbiAgICAgIERJLnJlZ2lzdGVyRXZlbnQoe2V2ZW50OiAndXBkYXRlRW50aXR5VGVzdCcsIHJvdXRlOiAndXBkYXRlRW50aXR5VGVzdCd9KVxuICAgICAgdmFyIHVwZGF0ZUVudGl0eVRlc3RSZXF1ZXN0ID0ge1xuICAgICAgICBpdGVtczogW3tuYW1lOiAndGVzdHVwZGF0ZScsIF9pZDogZ2xvYmFsLnNlcnZpY2VSZXNwb25zZS5pdGVtc0lkc1swXSB9LCB7bmFtZTogJ3Rlc3R1cGRhdGUyJywgX2lkOiBnbG9iYWwuc2VydmljZVJlc3BvbnNlLml0ZW1zSWRzWzFdIH1dXG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBnbG9iYWwuc2VydmljZVJlc3BvbnNlID0gYXdhaXQgREkuY2FsbFJvdXRlKHtyb3V0ZTogJ3VwZGF0ZUVudGl0eVRlc3QnLCByZXF1ZXN0OiB1cGRhdGVFbnRpdHlUZXN0UmVxdWVzdH0pXG4gICAgICAgIHQudHlwZShnbG9iYWwuc2VydmljZVJlc3BvbnNlLCAnb2JqZWN0JywgJ1Jlc3BvbnNlIGlzIG9iamVjdCcpXG4gICAgICAgIHQudHlwZShnbG9iYWwuc2VydmljZVJlc3BvbnNlLml0ZW1zSWRzLCAnQXJyYXknLCAnaXRlbXNJZHMgaXMgYXJyYXknKVxuICAgICAgICB0LnR5cGUoZ2xvYmFsLnNlcnZpY2VSZXNwb25zZS5pdGVtc0lkcy5sZW5ndGgsIDIsICdpdGVtc0lkcyBsZW5ndGggaXMgMicpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBESS50aHJvd0Vycm9yKCdESS5jYWxsUm91dGUgdXBkYXRlRW50aXR5VGVzdCcsIGVycm9yLCB7cm91dGU6ICd1cGRhdGVFbnRpdHlUZXN0JywgcmVxdWVzdDogdXBkYXRlRW50aXR5VGVzdFJlcXVlc3R9KVxuICAgICAgfVxuXG4gICAgICB0LmVuZCgpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIERJLmVycm9yKHtlcnJvcn0pXG4gICAgICB0LmZhaWwoJ0ZBSUwgdXBkYXRlRW50aXR5VGVzdCcpXG4gICAgICB0LmVuZCgnRkFJTCB1cGRhdGVFbnRpdHlUZXN0JylcbiAgICB9XG4gIH0pXG4gIGF3YWl0IHQudGVzdCgnLT4gQ1JVRCBSRUFEJywgYXN5bmMgZnVuY3Rpb24gKHQpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHJlYWRFbnRpdHlUZXN0ID0gYXN5bmMgZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgaXRlbXNJZHMgPSByZXF1ZXN0Lmlkc1xuICAgICAgICAgIGlmICghaXRlbXNJZHMgfHwgIWl0ZW1zSWRzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdyZWFkRW50aXR5VGVzdCByZXF1aXJlIGl0ZW1zIGlkcycpXG4gICAgICAgICAgdmFyIGF1dGhvcml6YXRpb25zRGF0YSA9IGF3YWl0IERJLmF1dGhlbnRpY2F0ZSh7cmVxdWVzdH0pXG4gICAgICAgICAgYXdhaXQgREkuYXV0aG9yaXplKHtjb250ZXh0OiBhdXRob3JpemF0aW9uc0RhdGEsIGFjdGlvbjogJ3JlYWQnLCBlbnRpdHk6ICdlbnRpdHlUZXN0JywgaXRlbXNJZHN9KVxuICAgICAgICAgIHZhciBpdGVtcyA9IGF3YWl0IGVudGl0eVRlc3RESS52aWV3c1BhY2thZ2UuZ2V0KHtpZHM6IGl0ZW1zSWRzfSlcbiAgICAgICAgICBESS5kZWJ1Zyh7bXNnOiAncmVhZEVudGl0eVRlc3QnLCBjb250ZXh0OiBQQUNLQUdFLCBkZWJ1Zzoge2l0ZW1zSWRzLCBhdXRob3JpemF0aW9uc0RhdGEsIGl0ZW1zfX0pXG4gICAgICAgICAgcmV0dXJuIHtpdGVtc31cbiAgICAgICAgICAgIC8vIERJLmxvZyh7Y29udGV4dDogJ3BhY2thZ2VOYW1lJywgbmFtZTogJ3JlYWRFbnRpdHlUZXN0JywgbG9nOiB7aWRzfX0pXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgREkudGhyb3dFcnJvcigncmVhZEVudGl0eVRlc3QnLCBlcnJvciwgcmVxdWVzdClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgREkucmVnaXN0ZXJSb3V0ZSh7cm91dGU6ICdyZWFkRW50aXR5VGVzdCcsIHJvdXRlRnVuY3Rpb246IHJlYWRFbnRpdHlUZXN0fSlcbiAgICAgIERJLnJlZ2lzdGVyRXZlbnQoe2V2ZW50OiAncmVhZEVudGl0eVRlc3QnLCByb3V0ZTogJ3JlYWRFbnRpdHlUZXN0J30pXG4gICAgICB2YXIgcmVhZEVudGl0eVRlc3RSZXF1ZXN0ID0ge1xuICAgICAgICBpZHM6IGdsb2JhbC5zZXJ2aWNlUmVzcG9uc2UuaXRlbXNJZHNcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGdsb2JhbC5zZXJ2aWNlUmVzcG9uc2UgPSBhd2FpdCBESS5jYWxsUm91dGUoe3JvdXRlOiAncmVhZEVudGl0eVRlc3QnLCByZXF1ZXN0OiByZWFkRW50aXR5VGVzdFJlcXVlc3R9KVxuICAgICAgICB0LnR5cGUoZ2xvYmFsLnNlcnZpY2VSZXNwb25zZSwgJ29iamVjdCcsICdSZXNwb25zZSBpcyBvYmplY3QnKVxuICAgICAgICB0LnR5cGUoZ2xvYmFsLnNlcnZpY2VSZXNwb25zZS5pdGVtcywgJ0FycmF5JywgJ2l0ZW1zIGlzIGFycmF5JylcbiAgICAgICAgdC50eXBlKGdsb2JhbC5zZXJ2aWNlUmVzcG9uc2UuaXRlbXMubGVuZ3RoLCAyLCAnaXRlbXMgbGVuZ3RoIGlzIDInKVxuICAgICAgICB0LmVxdWFsKGdsb2JhbC5zZXJ2aWNlUmVzcG9uc2UuaXRlbXNbMF0ubmFtZSwgJ3Rlc3R1cGRhdGUnLCAnaXRlbSAxIDogc2VuZGVkIG5hbWUgPSByZWFkZWQgbmFtZScpXG4gICAgICAgIHQuZXF1YWwoZ2xvYmFsLnNlcnZpY2VSZXNwb25zZS5pdGVtc1sxXS5uYW1lLCAndGVzdHVwZGF0ZTInLCAnaXRlbSAyIDogc2VuZGVkIG5hbWUgPSByZWFkZWQgbmFtZScpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBESS50aHJvd0Vycm9yKCdESS5jYWxsUm91dGUgcmVhZEVudGl0eVRlc3QnLCBlcnJvciwge3JvdXRlOiAncmVhZEVudGl0eVRlc3QnLCByZXF1ZXN0OiByZWFkRW50aXR5VGVzdFJlcXVlc3R9KVxuICAgICAgfVxuXG4gICAgICB0LmVuZCgpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIERJLmVycm9yKHtlcnJvcn0pXG4gICAgICB0LmZhaWwoJ0ZBSUwgcmVhZEVudGl0eVRlc3QnKVxuICAgICAgdC5lbmQoJ0ZBSUwgcmVhZEVudGl0eVRlc3QnKVxuICAgIH1cbiAgfSlcbiAgYXdhaXQgdC50ZXN0KCctPiBDUlVEIERFTEVURScsIGFzeW5jIGZ1bmN0aW9uICh0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBkZWxldGVFbnRpdHlUZXN0ID0gYXN5bmMgZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgaXRlbXNJZHMgPSByZXF1ZXN0Lmlkc1xuICAgICAgICAgIGlmICghaXRlbXNJZHMgfHwgIWl0ZW1zSWRzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdkZWxldGVFbnRpdHlUZXN0IHJlcXVpcmUgaXRlbXMgaWRzJylcbiAgICAgICAgICB2YXIgYXV0aG9yaXphdGlvbnNEYXRhID0gYXdhaXQgREkuYXV0aGVudGljYXRlKHtyZXF1ZXN0fSlcbiAgICAgICAgICBhd2FpdCBESS5hdXRob3JpemUoe2NvbnRleHQ6IGF1dGhvcml6YXRpb25zRGF0YSwgYWN0aW9uOiAnd3JpdGUnLCBlbnRpdHk6ICdlbnRpdHlUZXN0JywgaXRlbXNJZHN9KVxuICAgICAgICAgIHZhciBpdGVtc011dGF0aW9ucyA9IGF3YWl0IGVudGl0eVRlc3RESS5tdXRhdGlvbnNQYWNrYWdlLm11dGF0ZSh7bXV0YXRpb246ICdkZWxldGUnLCBpdGVtc0lkc30pXG4gICAgICAgICAgYXdhaXQgZW50aXR5VGVzdERJLnZpZXdzUGFja2FnZS5yZWZyZXNoSXRlbXNWaWV3cyh7aXRlbXNJZHMsIGxvYWRTbmFwc2hvdDogdHJ1ZSwgbG9hZE11dGF0aW9uczogdHJ1ZSwgYWRkTXV0YXRpb25zOiBpdGVtc011dGF0aW9uc30pXG4gICAgICAgICAgREkuZGVidWcoe21zZzogJ2RlbGV0ZUVudGl0eVRlc3QnLCBjb250ZXh0OiBQQUNLQUdFLCBkZWJ1Zzoge2l0ZW1zSWRzLCBpdGVtc011dGF0aW9uc319KVxuICAgICAgICAgIHJldHVybiB7aXRlbXNJZHN9XG4gICAgICAgICAgICAvLyBESS5sb2coe2NvbnRleHQ6ICdwYWNrYWdlTmFtZScsIG5hbWU6ICdkZWxldGVFbnRpdHlUZXN0JywgbG9nOiB7aWRzfX0pXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgREkudGhyb3dFcnJvcignZGVsZXRlRW50aXR5VGVzdCcsIGVycm9yLCByZXF1ZXN0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBESS5yZWdpc3RlclJvdXRlKHtyb3V0ZTogJ2RlbGV0ZUVudGl0eVRlc3QnLCByb3V0ZUZ1bmN0aW9uOiBkZWxldGVFbnRpdHlUZXN0fSlcbiAgICAgIERJLnJlZ2lzdGVyRXZlbnQoe2V2ZW50OiAnZGVsZXRlRW50aXR5VGVzdCcsIHJvdXRlOiAnZGVsZXRlRW50aXR5VGVzdCd9KVxuICAgICAgdmFyIGRlbGV0ZUVudGl0eVRlc3RSZXF1ZXN0ID0ge1xuICAgICAgICBpZHM6IFtnbG9iYWwuc2VydmljZVJlc3BvbnNlLml0ZW1zWzBdLl9pZF1cbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGdsb2JhbC5zZXJ2aWNlUmVzcG9uc2UgPSBhd2FpdCBESS5jYWxsUm91dGUoe3JvdXRlOiAnZGVsZXRlRW50aXR5VGVzdCcsIHJlcXVlc3Q6IGRlbGV0ZUVudGl0eVRlc3RSZXF1ZXN0fSlcbiAgICAgICAgdC50eXBlKGdsb2JhbC5zZXJ2aWNlUmVzcG9uc2UsICdvYmplY3QnLCAnUmVzcG9uc2UgaXMgb2JqZWN0JylcbiAgICAgICAgdC50eXBlKGdsb2JhbC5zZXJ2aWNlUmVzcG9uc2UuaXRlbXNJZHMsICdBcnJheScsICdpdGVtcyBpcyBhcnJheScpXG4gICAgICAgIHQudHlwZShnbG9iYWwuc2VydmljZVJlc3BvbnNlLml0ZW1zSWRzLmxlbmd0aCwgMSwgJ2l0ZW1zIGxlbmd0aCBpcyAxJylcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIERJLnRocm93RXJyb3IoJ0RJLmNhbGxSb3V0ZSBkZWxldGVFbnRpdHlUZXN0JywgZXJyb3IsIHtyb3V0ZTogJ2RlbGV0ZUVudGl0eVRlc3QnLCByZXF1ZXN0OiBkZWxldGVFbnRpdHlUZXN0UmVxdWVzdH0pXG4gICAgICB9XG5cbiAgICAgIHQuZW5kKClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgREkuZXJyb3Ioe2Vycm9yfSlcbiAgICAgIHQuZmFpbCgnRkFJTCBkZWxldGVFbnRpdHlUZXN0JylcbiAgICAgIHQuZW5kKCdGQUlMIGRlbGV0ZUVudGl0eVRlc3QnKVxuICAgIH1cbiAgfSlcbn0pXG4iXX0=