
if (!global._babelPolyfill) {
  require('babel-polyfill')
}
var t = require('tap')
var R = require('ramda')
var path = require('path')
const PACKAGE = 'jesus.test'
process.on('unhandledRejection', (reason, promise) => {
  console.log('unhandledRejection Reason: ', promise, reason)
  console.trace(promise)
})

var SERVICE = {
  name: 'testService',
  routes: {},
  config: {
    mainStorage: {
      type: 'inmemory',
      config: {
        path: path.join(__dirname, 'fileDb')
      }
    }
  },
  events: {}
}
var DI = require('./DI.default')
DI = R.merge(DI, require('./DI')(SERVICE, PACKAGE))

t.test('*** JESUS SERVICE CRUD ***', {
  autoend: true
}, async function mainTest (t) {
  var entityTestConfig = await require('./entityTestConfig')(SERVICE, DI)
  var entityTestDI = await require('./entityTestDI')(DI, entityTestConfig)
  global.serviceResponse = {}
  t.plan(4)
  await t.test('-> CRUD CREATE', async function (t) {
    try {
      var createEntityTest = async function (request) {
        try {
          const uuidV4 = require('uuid/v4')
          var items = request.items
          if (!items || !items.length) throw new Error('createEntityTest require items')
          items.forEach((item) => { if (!item._id)item._id = uuidV4() }) // ID AUTOGENERATED IF NOT INCLUDED
          await entityTestDI.validate({items})
          var authorizationsData = await DI.authenticate({request})
          await DI.authorize({context: authorizationsData, action: 'write', entity: 'entityTest', items})
          var itemsIds = R.map(R.prop('_id'), items)
          var itemsMutations = await entityTestDI.mutationsPackage.mutate({mutation: 'create', itemsIds, items})
          DI.debug({msg: 'createEntityTest', context: PACKAGE, debug: {itemsMutations}})
          await entityTestDI.viewsPackage.refreshItemsViews({itemsIds, loadSnapshot: false, loadMutations: false, addMutations: itemsMutations})
          return {itemsIds}
            // DI.log({context: 'packageName', name: 'createEntityTest', log: {ids}})
        } catch (error) {
          DI.throwError('createEntityTest', error, request)
        }
      }
      DI.registerRoute({route: 'createEntityTest', routeFunction: createEntityTest})
      DI.registerEvent({event: 'createEntityTest', route: 'createEntityTest'})
      var createEntityTestRequest = {
        items: [{name: 'test'}, {name: 'test2'}]
      }
      try {
        global.serviceResponse = await DI.callRoute({route: 'createEntityTest', request: createEntityTestRequest})
        t.type(global.serviceResponse, 'object', 'Response is object')
        t.type(global.serviceResponse.itemsIds, 'Array', 'itemsIds is array')
        t.type(global.serviceResponse.itemsIds.length, 2, 'itemsIds length is 2')
      } catch (error) {
        DI.throwError('DI.callRoute createEntityTest', error, {route: 'createEntityTest', request: createEntityTestRequest})
      }

      t.end()
    } catch (error) {
      DI.error({error})
      t.fail('FAIL createEntityTest')
      t.end('FAIL createEntityTest')
    }
  })
  await t.test('-> CRUD UPDATE', async function (t) {
    try {
      var updateEntityTest = async function (request) {
        try {
          var items = request.items
          if (!items || !items.length) throw new Error('updateEntityTest require items')
          items.forEach((item) => { if (!item._id) throw new Error('updateEntityTest items _id field is required') }) // ID NEEDED
          await entityTestDI.validate({items})
          var authorizationsData = await DI.authenticate({request})
          await DI.authorize({context: authorizationsData, action: 'write', entity: 'entityTest', items})
          var itemsIds = R.map(R.prop('_id'), items)
          var itemsMutations = await entityTestDI.mutationsPackage.mutate({mutation: 'update', itemsIds, items})
          DI.debug({msg: 'updateEntityTest', context: PACKAGE, debug: {itemsMutations}})
          await entityTestDI.viewsPackage.refreshItemsViews({itemsIds, loadSnapshot: true, loadMutations: true, addMutations: itemsMutations})
          return {itemsIds}
            // DI.log({context: 'packageName', name: 'updateEntityTest', log: {ids}})
        } catch (error) {
          DI.throwError('updateEntityTest', error, request)
        }
      }
      DI.registerRoute({route: 'updateEntityTest', routeFunction: updateEntityTest})
      DI.registerEvent({event: 'updateEntityTest', route: 'updateEntityTest'})
      var updateEntityTestRequest = {
        items: [{name: 'testupdate', _id: global.serviceResponse.itemsIds[0] }, {name: 'testupdate2', _id: global.serviceResponse.itemsIds[1] }]
      }
      try {
        global.serviceResponse = await DI.callRoute({route: 'updateEntityTest', request: updateEntityTestRequest})
        t.type(global.serviceResponse, 'object', 'Response is object')
        t.type(global.serviceResponse.itemsIds, 'Array', 'itemsIds is array')
        t.type(global.serviceResponse.itemsIds.length, 2, 'itemsIds length is 2')
      } catch (error) {
        DI.throwError('DI.callRoute updateEntityTest', error, {route: 'updateEntityTest', request: updateEntityTestRequest})
      }

      t.end()
    } catch (error) {
      DI.error({error})
      t.fail('FAIL updateEntityTest')
      t.end('FAIL updateEntityTest')
    }
  })
  await t.test('-> CRUD READ', async function (t) {
    try {
      var readEntityTest = async function (request) {
        try {
          var itemsIds = request.ids
          if (!itemsIds || !itemsIds.length) throw new Error('readEntityTest require items ids')
          var authorizationsData = await DI.authenticate({request})
          await DI.authorize({context: authorizationsData, action: 'read', entity: 'entityTest', itemsIds})
          var items = await entityTestDI.viewsPackage.get({ids: itemsIds})
          DI.debug({msg: 'readEntityTest', context: PACKAGE, debug: {itemsIds, authorizationsData, items}})
          return {items}
            // DI.log({context: 'packageName', name: 'readEntityTest', log: {ids}})
        } catch (error) {
          DI.throwError('readEntityTest', error, request)
        }
      }
      DI.registerRoute({route: 'readEntityTest', routeFunction: readEntityTest})
      DI.registerEvent({event: 'readEntityTest', route: 'readEntityTest'})
      var readEntityTestRequest = {
        ids: global.serviceResponse.itemsIds
      }
      try {
        global.serviceResponse = await DI.callRoute({route: 'readEntityTest', request: readEntityTestRequest})
        t.type(global.serviceResponse, 'object', 'Response is object')
        t.type(global.serviceResponse.items, 'Array', 'items is array')
        t.type(global.serviceResponse.items.length, 2, 'items length is 2')
        t.equal(global.serviceResponse.items[0].name, 'testupdate', 'item 1 : sended name = readed name')
        t.equal(global.serviceResponse.items[1].name, 'testupdate2', 'item 2 : sended name = readed name')
      } catch (error) {
        DI.throwError('DI.callRoute readEntityTest', error, {route: 'readEntityTest', request: readEntityTestRequest})
      }

      t.end()
    } catch (error) {
      DI.error({error})
      t.fail('FAIL readEntityTest')
      t.end('FAIL readEntityTest')
    }
  })
  await t.test('-> CRUD DELETE', async function (t) {
    try {
      var deleteEntityTest = async function (request) {
        try {
          var itemsIds = request.ids
          if (!itemsIds || !itemsIds.length) throw new Error('deleteEntityTest require items ids')
          var authorizationsData = await DI.authenticate({request})
          await DI.authorize({context: authorizationsData, action: 'write', entity: 'entityTest', itemsIds})
          var itemsMutations = await entityTestDI.mutationsPackage.mutate({mutation: 'delete', itemsIds})
          await entityTestDI.viewsPackage.refreshItemsViews({itemsIds, loadSnapshot: true, loadMutations: true, addMutations: itemsMutations})
          DI.debug({msg: 'deleteEntityTest', context: PACKAGE, debug: {itemsIds, itemsMutations}})
          return {itemsIds}
            // DI.log({context: 'packageName', name: 'deleteEntityTest', log: {ids}})
        } catch (error) {
          DI.throwError('deleteEntityTest', error, request)
        }
      }
      DI.registerRoute({route: 'deleteEntityTest', routeFunction: deleteEntityTest})
      DI.registerEvent({event: 'deleteEntityTest', route: 'deleteEntityTest'})
      var deleteEntityTestRequest = {
        ids: [global.serviceResponse.items[0]._id]
      }
      try {
        global.serviceResponse = await DI.callRoute({route: 'deleteEntityTest', request: deleteEntityTestRequest})
        t.type(global.serviceResponse, 'object', 'Response is object')
        t.type(global.serviceResponse.itemsIds, 'Array', 'items is array')
        t.type(global.serviceResponse.itemsIds.length, 1, 'items length is 1')
      } catch (error) {
        DI.throwError('DI.callRoute deleteEntityTest', error, {route: 'deleteEntityTest', request: deleteEntityTestRequest})
      }

      t.end()
    } catch (error) {
      DI.error({error})
      t.fail('FAIL deleteEntityTest')
      t.end('FAIL deleteEntityTest')
    }
  })
})
