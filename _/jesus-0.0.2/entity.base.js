'use strict';

var R = require('ramda');
// var path = require('path')
// const uuidV4 = require('uuid/v4')xs
var getValuePromise = require('./jesus').getValuePromise;
var checkRequired = require('./jesus').checkRequired;
var path = require('path');

module.exports = function getEntityBasePackage(CONFIG, DI) {
  var PACKAGE, entityName, storagePackage, validationsPath, updateValidationFile;
  return regeneratorRuntime.async(function getEntityBasePackage$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          PACKAGE = 'entity.base';

          CONFIG = checkRequired(CONFIG, ['entityName', 'validationsPath'], PACKAGE);
          DI = checkRequired(DI, ['throwError'], PACKAGE);
          _context3.next = 5;
          return regeneratorRuntime.awrap(getValuePromise(CONFIG.entityName));

        case 5:
          entityName = _context3.sent;
          _context3.next = 8;
          return regeneratorRuntime.awrap(CONFIG.storage(CONFIG, DI));

        case 8:
          storagePackage = _context3.sent;
          _context3.next = 11;
          return regeneratorRuntime.awrap(getValuePromise(CONFIG.validationsPath));

        case 11:
          validationsPath = _context3.sent;
          updateValidationFile = path.join(validationsPath, 'update.schema.json');
          // function checkItemsIds (items) {  // ID AUTOGENERATED IF NOT INCLUDED
          //   items.forEach((item) => { if (!item._id)item._id = require('uuid/v4')() })
          // }

          return _context3.abrupt('return', {
            update: function update(_ref) {
              var itemsIds = _ref.itemsIds,
                  items = _ref.items;
              var validate, validationResults;
              return regeneratorRuntime.async(function update$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;

                      if (!(!itemsIds || !items)) {
                        _context.next = 3;
                        break;
                      }

                      throw new Error('ARG itemsIds, items are required');

                    case 3:
                      validate = require('./validate.jsonSchema');
                      _context.next = 6;
                      return regeneratorRuntime.awrap(validate({ items: items, validationSchema: updateValidationFile, throwIfFileNotFounded: true }));

                    case 6:
                      validationResults = _context.sent;
                      _context.next = 9;
                      return regeneratorRuntime.awrap(storagePackage.update({
                        queriesArray: R.map(function (itemId) {
                          return { '_id': itemId };
                        }, itemsIds),
                        dataArray: items,
                        insertIfNotExists: true }));

                    case 9:
                      DI.debug({ msg: 'ENTITY: ' + entityName + ' update()', context: PACKAGE, debug: { itemsIds: itemsIds, items: items } });
                      return _context.abrupt('return', itemsIds);

                    case 13:
                      _context.prev = 13;
                      _context.t0 = _context['catch'](0);

                      DI.throwError('ENTITY: ' + entityName + ' update()', _context.t0, { itemsIds: itemsIds, items: items });

                    case 16:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, null, this, [[0, 13]]);
            },
            read: function read(_ref2) {
              var itemsIds = _ref2.itemsIds;
              var items;
              return regeneratorRuntime.async(function read$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.prev = 0;

                      if (itemsIds) {
                        _context2.next = 3;
                        break;
                      }

                      throw new Error('ENTITY: ' + entityName + ' read(itemsIds)  required args');

                    case 3:
                      _context2.next = 5;
                      return regeneratorRuntime.awrap(storagePackage.get({ ids: itemsIds }));

                    case 5:
                      items = _context2.sent;

                      DI.debug({ msg: 'ENTITY: ' + entityName + ' read()', context: PACKAGE, debug: { itemsIds: itemsIds, items: items } });
                      return _context2.abrupt('return', items);

                    case 10:
                      _context2.prev = 10;
                      _context2.t0 = _context2['catch'](0);

                      DI.throwError('ENTITY: ' + entityName + ' read()', _context2.t0, { itemsIds: itemsIds });

                    case 13:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, null, this, [[0, 10]]);
            }
          });

        case 14:
        case 'end':
          return _context3.stop();
      }
    }
  }, null, this);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVudGl0eS5iYXNlLmVzNiJdLCJuYW1lcyI6WyJSIiwicmVxdWlyZSIsImdldFZhbHVlUHJvbWlzZSIsImNoZWNrUmVxdWlyZWQiLCJwYXRoIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldEVudGl0eUJhc2VQYWNrYWdlIiwiQ09ORklHIiwiREkiLCJQQUNLQUdFIiwiZW50aXR5TmFtZSIsInN0b3JhZ2UiLCJzdG9yYWdlUGFja2FnZSIsInZhbGlkYXRpb25zUGF0aCIsInVwZGF0ZVZhbGlkYXRpb25GaWxlIiwiam9pbiIsInVwZGF0ZSIsIml0ZW1zSWRzIiwiaXRlbXMiLCJFcnJvciIsInZhbGlkYXRlIiwidmFsaWRhdGlvblNjaGVtYSIsInRocm93SWZGaWxlTm90Rm91bmRlZCIsInZhbGlkYXRpb25SZXN1bHRzIiwicXVlcmllc0FycmF5IiwibWFwIiwiaXRlbUlkIiwiZGF0YUFycmF5IiwiaW5zZXJ0SWZOb3RFeGlzdHMiLCJkZWJ1ZyIsIm1zZyIsImNvbnRleHQiLCJ0aHJvd0Vycm9yIiwicmVhZCIsImdldCIsImlkcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxJQUFJQyxRQUFRLE9BQVIsQ0FBUjtBQUNBO0FBQ0E7QUFDQSxJQUFNQyxrQkFBa0JELFFBQVEsU0FBUixFQUFtQkMsZUFBM0M7QUFDQSxJQUFNQyxnQkFBZ0JGLFFBQVEsU0FBUixFQUFtQkUsYUFBekM7QUFDQSxJQUFJQyxPQUFPSCxRQUFRLE1BQVIsQ0FBWDs7QUFFQUksT0FBT0MsT0FBUCxHQUFpQixTQUFlQyxvQkFBZixDQUFxQ0MsTUFBckMsRUFBNkNDLEVBQTdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNUQyxpQkFEUyxHQUNDLGFBREQ7O0FBRWZGLG1CQUFTTCxjQUFjSyxNQUFkLEVBQXNCLENBQUMsWUFBRCxFQUFjLGlCQUFkLENBQXRCLEVBQXdERSxPQUF4RCxDQUFUO0FBQ0FELGVBQUtOLGNBQWNNLEVBQWQsRUFBa0IsQ0FBRSxZQUFGLENBQWxCLEVBQW1DQyxPQUFuQyxDQUFMO0FBSGU7QUFBQSwwQ0FJUVIsZ0JBQWdCTSxPQUFPRyxVQUF2QixDQUpSOztBQUFBO0FBSVhBLG9CQUpXO0FBQUE7QUFBQSwwQ0FLWUgsT0FBT0ksT0FBUCxDQUFlSixNQUFmLEVBQXVCQyxFQUF2QixDQUxaOztBQUFBO0FBS1hJLHdCQUxXO0FBQUE7QUFBQSwwQ0FNYVgsZ0JBQWdCTSxPQUFPTSxlQUF2QixDQU5iOztBQUFBO0FBTVhBLHlCQU5XO0FBT1hDLDhCQVBXLEdBT1lYLEtBQUtZLElBQUwsQ0FBVUYsZUFBVix1QkFQWjtBQVFmO0FBQ0E7QUFDQTs7QUFWZSw0Q0FZUjtBQUNDRyxrQkFERDtBQUFBLGtCQUNVQyxRQURWLFFBQ1VBLFFBRFY7QUFBQSxrQkFDb0JDLEtBRHBCLFFBQ29CQSxLQURwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSw0QkFHRyxDQUFDRCxRQUFELElBQWEsQ0FBQ0MsS0FIakI7QUFBQTtBQUFBO0FBQUE7O0FBQUEsNEJBRzhCLElBQUlDLEtBQUosQ0FBVSxrQ0FBVixDQUg5Qjs7QUFBQTtBQUlHQyw4QkFKSCxHQUljcEIsUUFBUSx1QkFBUixDQUpkO0FBQUE7QUFBQSxzREFLNkJvQixTQUFTLEVBQUNGLFlBQUQsRUFBUUcsa0JBQWlCUCxvQkFBekIsRUFBK0NRLHVCQUF1QixJQUF0RSxFQUFULENBTDdCOztBQUFBO0FBS0dDLHVDQUxIO0FBQUE7QUFBQSxzREFNS1gsZUFBZUksTUFBZixDQUFzQjtBQUMxQlEsc0NBQWN6QixFQUFFMEIsR0FBRixDQUFNLFVBQUNDLE1BQUQ7QUFBQSxpQ0FBYSxFQUFDLE9BQU9BLE1BQVIsRUFBYjtBQUFBLHlCQUFOLEVBQXFDVCxRQUFyQyxDQURZO0FBRTFCVSxtQ0FBV1QsS0FGZTtBQUcxQlUsMkNBQW1CLElBSE8sRUFBdEIsQ0FOTDs7QUFBQTtBQVVEcEIseUJBQUdxQixLQUFILENBQVMsRUFBQ0Msa0JBQWdCcEIsVUFBaEIsY0FBRCxFQUF3Q3FCLFNBQVN0QixPQUFqRCxFQUEwRG9CLE9BQU8sRUFBQ1osa0JBQUQsRUFBV0MsWUFBWCxFQUFqRSxFQUFUO0FBVkMsdURBV01ELFFBWE47O0FBQUE7QUFBQTtBQUFBOztBQWFEVCx5QkFBR3dCLFVBQUgsY0FBeUJ0QixVQUF6Qiw2QkFBdUQsRUFBQ08sa0JBQUQsRUFBV0MsWUFBWCxFQUF2RDs7QUFiQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWdCQ2UsZ0JBaEJEO0FBQUEsa0JBZ0JRaEIsUUFoQlIsU0FnQlFBLFFBaEJSO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLDBCQWtCSUEsUUFsQko7QUFBQTtBQUFBO0FBQUE7O0FBQUEsNEJBa0JvQixJQUFJRSxLQUFKLGNBQXFCVCxVQUFyQixvQ0FsQnBCOztBQUFBO0FBQUE7QUFBQSxzREFtQmlCRSxlQUFlc0IsR0FBZixDQUFtQixFQUFDQyxLQUFLbEIsUUFBTixFQUFuQixDQW5CakI7O0FBQUE7QUFtQkdDLDJCQW5CSDs7QUFvQkRWLHlCQUFHcUIsS0FBSCxDQUFTLEVBQUNDLGtCQUFnQnBCLFVBQWhCLFlBQUQsRUFBc0NxQixTQUFTdEIsT0FBL0MsRUFBd0RvQixPQUFPLEVBQUNaLGtCQUFELEVBQVdDLFlBQVgsRUFBL0QsRUFBVDtBQXBCQyx3REFxQk1BLEtBckJOOztBQUFBO0FBQUE7QUFBQTs7QUF1QkRWLHlCQUFHd0IsVUFBSCxjQUF5QnRCLFVBQXpCLDRCQUFxRCxFQUFDTyxrQkFBRCxFQUFyRDs7QUF2QkM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQVpROztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQWpCIiwiZmlsZSI6ImVudGl0eS5iYXNlLmVzNiIsInNvdXJjZXNDb250ZW50IjpbInZhciBSID0gcmVxdWlyZSgncmFtZGEnKVxuLy8gdmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbi8vIGNvbnN0IHV1aWRWNCA9IHJlcXVpcmUoJ3V1aWQvdjQnKXhzXG5jb25zdCBnZXRWYWx1ZVByb21pc2UgPSByZXF1aXJlKCcuL2plc3VzJykuZ2V0VmFsdWVQcm9taXNlXG5jb25zdCBjaGVja1JlcXVpcmVkID0gcmVxdWlyZSgnLi9qZXN1cycpLmNoZWNrUmVxdWlyZWRcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgZnVuY3Rpb24gZ2V0RW50aXR5QmFzZVBhY2thZ2UgKENPTkZJRywgREkpIHtcbiAgY29uc3QgUEFDS0FHRSA9ICdlbnRpdHkuYmFzZSdcbiAgQ09ORklHID0gY2hlY2tSZXF1aXJlZChDT05GSUcsIFsnZW50aXR5TmFtZScsJ3ZhbGlkYXRpb25zUGF0aCddLCBQQUNLQUdFKVxuICBESSA9IGNoZWNrUmVxdWlyZWQoREksIFsgJ3Rocm93RXJyb3InXSwgUEFDS0FHRSlcbiAgdmFyIGVudGl0eU5hbWUgPSBhd2FpdCBnZXRWYWx1ZVByb21pc2UoQ09ORklHLmVudGl0eU5hbWUpXG4gIHZhciBzdG9yYWdlUGFja2FnZSA9IGF3YWl0IENPTkZJRy5zdG9yYWdlKENPTkZJRywgREkpXG4gIHZhciB2YWxpZGF0aW9uc1BhdGggPSBhd2FpdCBnZXRWYWx1ZVByb21pc2UoQ09ORklHLnZhbGlkYXRpb25zUGF0aClcbiAgdmFyIHVwZGF0ZVZhbGlkYXRpb25GaWxlID0gcGF0aC5qb2luKHZhbGlkYXRpb25zUGF0aCwgYHVwZGF0ZS5zY2hlbWEuanNvbmApXG4gIC8vIGZ1bmN0aW9uIGNoZWNrSXRlbXNJZHMgKGl0ZW1zKSB7ICAvLyBJRCBBVVRPR0VORVJBVEVEIElGIE5PVCBJTkNMVURFRFxuICAvLyAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHsgaWYgKCFpdGVtLl9pZClpdGVtLl9pZCA9IHJlcXVpcmUoJ3V1aWQvdjQnKSgpIH0pXG4gIC8vIH1cblxuICByZXR1cm4ge1xuICAgIGFzeW5jIHVwZGF0ZSAoe2l0ZW1zSWRzLCBpdGVtc30pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghaXRlbXNJZHMgfHwgIWl0ZW1zKSB0aHJvdyBuZXcgRXJyb3IoJ0FSRyBpdGVtc0lkcywgaXRlbXMgYXJlIHJlcXVpcmVkJylcbiAgICAgICAgdmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi92YWxpZGF0ZS5qc29uU2NoZW1hJylcbiAgICAgICAgdmFyIHZhbGlkYXRpb25SZXN1bHRzID0gYXdhaXQgdmFsaWRhdGUoe2l0ZW1zLCB2YWxpZGF0aW9uU2NoZW1hOnVwZGF0ZVZhbGlkYXRpb25GaWxlLCB0aHJvd0lmRmlsZU5vdEZvdW5kZWQ6IHRydWV9KVxuICAgICAgICBhd2FpdCBzdG9yYWdlUGFja2FnZS51cGRhdGUoe1xuICAgICAgICAgIHF1ZXJpZXNBcnJheTogUi5tYXAoKGl0ZW1JZCkgPT4gKHsnX2lkJzogaXRlbUlkfSksIGl0ZW1zSWRzKSxcbiAgICAgICAgICBkYXRhQXJyYXk6IGl0ZW1zLFxuICAgICAgICAgIGluc2VydElmTm90RXhpc3RzOiB0cnVlfSlcbiAgICAgICAgREkuZGVidWcoe21zZzogYEVOVElUWTogJHtlbnRpdHlOYW1lfSB1cGRhdGUoKWAsIGNvbnRleHQ6IFBBQ0tBR0UsIGRlYnVnOiB7aXRlbXNJZHMsIGl0ZW1zfX0pXG4gICAgICAgIHJldHVybiBpdGVtc0lkc1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgREkudGhyb3dFcnJvcihgRU5USVRZOiAke2VudGl0eU5hbWV9IHVwZGF0ZSgpYCwgZXJyb3IsIHtpdGVtc0lkcywgaXRlbXN9KVxuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgcmVhZCAoe2l0ZW1zSWRzfSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFpdGVtc0lkcykgdGhyb3cgbmV3IEVycm9yKGBFTlRJVFk6ICR7ZW50aXR5TmFtZX0gcmVhZChpdGVtc0lkcykgIHJlcXVpcmVkIGFyZ3NgKVxuICAgICAgICB2YXIgaXRlbXMgPSBhd2FpdCBzdG9yYWdlUGFja2FnZS5nZXQoe2lkczogaXRlbXNJZHN9KVxuICAgICAgICBESS5kZWJ1Zyh7bXNnOiBgRU5USVRZOiAke2VudGl0eU5hbWV9IHJlYWQoKWAsIGNvbnRleHQ6IFBBQ0tBR0UsIGRlYnVnOiB7aXRlbXNJZHMsIGl0ZW1zfX0pXG4gICAgICAgIHJldHVybiBpdGVtc1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgREkudGhyb3dFcnJvcihgRU5USVRZOiAke2VudGl0eU5hbWV9IHJlYWQoKWAsIGVycm9yLCB7aXRlbXNJZHN9KVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19