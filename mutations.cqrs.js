'use strict';

var R = require('ramda');
var path = require('path');
var fs = require('fs');
var PACKAGE = 'mutations.cqrs';
var checkRequired = require('./jesus').checkRequired;
var checkRequiredFiles = require('./jesus').checkRequiredFiles;

function getMutationsFunctions(basePath) {
  var filesJsNoExtension = R.map(R.compose(R.replace('.js', ''), path.basename), R.filter(function (file) {
    return path.extname(file) === '.js';
  }, fs.readdirSync(basePath)));
  var splitFiles = R.map(R.split('.'));
  var sortFiles = R.compose(R.reverse, R.sortBy(R.compose(parseInt, R.prop(0))));
  var groupFiles = R.groupBy(R.prop(0));
  var addFunction = R.map(R.map(function (element) {
    return { mutationId: element[0], mutationVersion: element[1] };
  }));
  var mutationsFunctions = R.compose(addFunction, groupFiles, sortFiles, splitFiles)(filesJsNoExtension);
  // debug('getMutationsFunctions', mutationsFunctions)
  return mutationsFunctions;
}

function checkMutationFunction(mutationId, mutationsFunctions) {
  if (!mutationsFunctions[mutationId] || !mutationsFunctions[mutationId][0]) {
    errorThrow('mutation not defined', { mutationId: mutationId });
  }
}

module.exports = function getMutationsCqrsPackage(_ref) {
  var getConsole = _ref.getConsole,
      serviceName = _ref.serviceName,
      serviceId = _ref.serviceId,
      mutationsPath = _ref.mutationsPath;

  var CONSOLE = getConsole(serviceName, serviceId, PACKAGE);
  var errorThrow = require('./jesus').errorThrow(serviceName, serviceId, PACKAGE);

  var applyMutationsFromPath = function applyMutationsFromPathFunc(originalState, mutations, mutationsPath) {
    var state = R.clone(originalState);
    CONSOLE.debug('applyMutationsFromPath', { state: state, mutations: mutations, mutationsPath: mutationsPath });
    function applyMutation(state, mutation) {
      var mutationFile = path.join(mutationsPath, mutation.mutation + '.' + mutation.version + '.js');
      return require(mutationFile)(state, mutation.data);
    }
    return R.reduce(applyMutation, state, mutations);
  };

  try {
    checkRequired({ serviceName: serviceName, serviceId: serviceId, mutationsPath: mutationsPath }, PACKAGE);
    checkRequiredFiles([mutationsPath], PACKAGE);
    return {
      mutate: function mutate(_ref2) {
        var mutation = _ref2.mutation,
            objId = _ref2.objId,
            data = _ref2.data,
            meta = _ref2.meta;

        try {
          checkRequired({ objId: objId, mutation: mutation }, PACKAGE);
          var mutationsFunctions = getMutationsFunctions(mutationsPath);
          checkMutationFunction(mutation, mutationsFunctions);
          var lastMutationVersion = mutationsFunctions[mutation][0].mutationVersion;
          var mutationState = {
            objId: objId,
            mutation: mutation,
            meta: meta,
            version: lastMutationVersion,
            timestamp: new Date().getTime() / 1000,
            data: data
          };
          CONSOLE.debug('dataSingleMutation to create', { mutation: mutation, lastMutationVersion: lastMutationVersion, objId: objId, data: data, mutationState: mutationState });
          return mutationState;
        } catch (error) {
          errorThrow('mutate(args) Error', { error: error, mutation: mutation, objId: objId, data: data });
        }
      },
      applyMutations: function applyMutations(_ref3) {
        var state = _ref3.state,
            mutations = _ref3.mutations;
        return regeneratorRuntime.async(function applyMutations$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                CONSOLE.debug('applyMutationsFromPath', { state: state, mutations: mutations, mutationsPath: mutationsPath });
                return _context.abrupt('return', applyMutationsFromPath(state, mutations, mutationsPath));

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, null, this);
      }
    };
  } catch (error) {
    errorThrow('getMutationsCqrsPackage', { error: error, mutationsPath: mutationsPath, mutationsStoragePackage: mutationsStoragePackage });
  }
};
//# sourceMappingURL=data:application/json;base64,