var R = require('ramda')
const checkRequired = require('./jesus').checkRequired
var LOG = console
const PACKAGE = 'entity.cqrs'

module.exports = async function getEntityCqrsPackage ({
  entityName,
  mutationsStorage, mutationsStorageCollection, mutationsStorageConfig, mutationsPath,
  viewsStorage, viewsStorageCollection, viewsStorageConfig,
  viewsSnapshotsStorage, viewsSnapshotsStorageCollection, viewsSnapshotsStorageConfig, viewsSnapshotsMaxMutations
  }) {
  checkRequired({
    entityName,
    mutationsStorage, mutationsStorageCollection, mutationsStorageConfig, mutationsPath,
    viewsStorage, viewsStorageCollection, viewsStorageConfig,
    viewsSnapshotsStorage, viewsSnapshotsStorageCollection, viewsSnapshotsStorageConfig
  }, PACKAGE)
  var mutationsStoragePackage = await mutationsStorage({storageCollection: mutationsStorageCollection, storageConfig: mutationsStorageConfig})
  var viewsStoragePackage = await viewsStorage({storageCollection: viewsStorageCollection, storageConfig: viewsStorageConfig})
  var viewsSnapshotsStoragePackage = await viewsSnapshotsStorage({storageCollection: viewsSnapshotsStorageCollection, storageConfig: viewsSnapshotsStorageConfig})
  var mutationsPackage = await require('./mutations.cqrs')({mutationsStoragePackage, mutationsPath})
  var viewsPackage = await require('./views.cqrs')({viewsStoragePackage, viewsSnapshotsStoragePackage, mutationsPackage, viewsSnapshotsMaxMutations})

  // function checkItemsIds (data) {  // ID AUTOGENERATED IF NOT INCLUDED
  //   data.forEach((item) => { if (!item._id)item._id = require('uuid/v4')() })
  // }

  return {
    mutationsPackage, viewsPackage
  //   async mutate ({id, data, mutation = 'update'}) {
  //     try {
  //       checkRequired({id ,mutation},PACKAGE)
  //       // await validate({data})//TO FIX validation specifica per mutation
  //       var dataMutations = await mutationsPackage.mutate({mutation, id, data})
  //       LOG.debug({msg: `ENTITY: ${entityName} mutate()`, context: PACKAGE, debug: {dataMutations}})
  //       return dataMutations
  //     } catch (error) {
  //       LOG.error(PACKAGE, error, {id, data, mutation})
  //       throw new Error(`ENTITY: ${entityName} mutate()`)
  //     }
  //   },
  //   async read ({id}) {
  //     try {
  //       checkRequired({id ,"id.length":id.length})
  //       var data = await viewsPackage.get({ids: id})
  //       LOG.debug({msg: `ENTITY: ${entityName} read()`, context: PACKAGE, debug: {id, data}})
  //       return data
  //     } catch (error) {
  //       LOG.error(PACKAGE, error, {id})
  //       throw new Error(`ENTITY: ${entityName} read()`)
  //     }
  //   },
  //   async refreshViews ({id, loadSnapshot, loadMutations, addMutations}) {
  //     try {
  //       await viewsPackage.refreshItemsViews({id, loadSnapshot, loadMutations, addMutations})
  //       //LOG.emitEvent({name: 'viewsUpdated', data: {entity: entityName, id: id}})
  //     } catch (error) {
  //       LOG.error(PACKAGE, error, {id, loadSnapshot, loadMutations, addMutations})
  //       throw new Error(`ENTITY: ${entityName} refreshViews()`)
  //     }
  //   }
  }
}
