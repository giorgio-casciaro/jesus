'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var R = require('ramda');
var fs = require('fs');
var path = require('path');
var deref = require('json-schema-deref-sync');
var normalise = require('ajv-error-messages');
var ajv = require('ajv')({ allErrors: true });
var LOG = console;
var sourceMapSupport = require('source-map-support');
sourceMapSupport.install();
var PACKAGE = 'jesus';

module.exports = {
  getAllServicesConfigFromDir: function getAllServicesConfigFromDir(dir) {
    var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api.json';

    var services = {};
    fs.readdirSync(dir).forEach(function (file) {
      var filePath = path.join(dir, file, fileName);
      if (fs.existsSync(filePath)) services[file] = require(filePath);
    });
    // LOG.debug("getAllServicesConfigFromDir",services)
    return services;
  },
  validateApiFromConfig: function validateApiFromConfig(apiConfigFile, apiMethod, data, schemaField) {
    // TO FIX ADD CACHE
    var apiConfigPath = path.dirname(apiConfigFile) + '/';
    var apiConfig = require(apiConfigFile);
    if (!apiConfig || !apiConfig[apiMethod] || !apiConfig[apiMethod][schemaField]) throw 'Api validation problem :' + apiMethod + ' ' + schemaField + ' in ' + apiConfigFile;
    var schema = deref(apiConfig[apiMethod][schemaField], { baseFolder: apiConfigPath, failOnMissing: true });
    LOG.debug(PACKAGE, 'validateApiFromConfig schema', { apiConfig: apiConfig, apiMethod: apiMethod, schemaField: schemaField, apiConfigPath: apiConfigPath, schema: schema });
    var validate = ajv.compile(schema);
    var valid = validate(data);

    if (!valid) {
      LOG.debug(PACKAGE, 'validate.errors', normalise(validate.errors));
      throw normalise(validate.errors);
    }
    return data;
  },

  getAsPromise: function getAsPromise(value) {
    return new Promise(function (resolve, reject) {
      Promise.resolve(value).then(function (value) {
        if (typeof value === 'function') {
          try {
            resolve(value());
          } catch (error) {
            reject(error);
          }
        } else resolve(value);
      });
    });
  },
  argsOverwrite: function argsOverwrite() {
    var overwriteArgs = Array.prototype.slice.call(arguments, 1);
    var originalPackage = arguments[0];
    var modifiedPackage = {};
    for (var i in originalPackage) {
      modifiedPackage[i] = function packageArgsOverwrite() {
        var modifiedArguments = Object.assign(arguments, overwriteArgs);
        return originalPackage[i].apply(this, modifiedArguments);
      };
    }
    return modifiedPackage;
  },
  checkRequired: function checkRequired(PROPS_OBJ, PACKAGE) {
    var propsNames = Object.keys(PROPS_OBJ);
    propsNames.forEach(function (propName) {
      if (!PROPS_OBJ[propName]) {
        throw 'PACKAGE ' + PACKAGE + ' -> Required Dependency ' + propName + ' is missing';
      }
    });
  },
  isEmptyArray: function isEmptyArray(array) {
    return !array || !array.length;
  },

  addObjectColumn: function addObjectColumn(objectsArray, columnName, valuesArray) {
    var addColums = function addColums(val, index) {
      return R.merge(_defineProperty({}, columnName, valuesArray[index]), val);
    };
    return R.addIndex(R.map)(addColums, objectsArray);
  }

};
//# sourceMappingURL=data:application/json;base64,